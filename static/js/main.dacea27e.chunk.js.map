{"version":3,"sources":["helpers/randomEmoji.js","components/Player/Avatar/Avatar.js","components/Player/ScoreTotal/ScoreTotal.js","components/Player/ScoreList/ScoreList.js","helpers/uniqueId.js","components/Player/ScoreInput/ScoreInput.js","components/Player/Player.js","components/ControlsTray/ControlsTray.js","helpers/randomScores.js","App.js","i18n.js","index.js"],"names":["randomEmoji","category","animalEmojis","emojiJson","filter","emoji","startsWith","unicode_version","randomEmojiIndex","Math","floor","random","length","randomEmojiObject","Avatar","className","tabIndex","aria-label","role","onClick","this","props","onAvatarClick","avatar","description","Component","ScoreTotal","total","ScoreList","scores","map","round","key","id","active","onScoreEdit","playerId","score","style","color","generateUniqueId","Number","String","split","toString","ScoreInput","state","valid","value","handleScoreChange","bind","handleValueChange","event","inputEl","target","inputValue","validValue","checkValidity","setState","rawScoreValue","newScoreValue","newValue","hasOwnProperty","uniqueId","onNewScoreInput","Translation","t","type","pattern","placeholder","onChange","htmlFor","Player","newScore","ControlsTray","playerInputComplete","players","every","player","scoreEditActive","some","title","onRemovePlayerClick","disabled","Trans","onRemoveScoresClick","onAddScoresClick","onAddPlayerClick","maxPlayers","React","getRandomScores","scoreQuantity","limit","Array","from","App","addPlayer","createNewPlayerObject","removePlayer","playersSansOne","splice","handleAvatarClick","handleAddScoresClick","handleRemoveScoresClick","handlePlayerNewScoreInput","handleAddPlayerClick","handleRemovePlayerClick","handleScoreEditClick","scoreId","selectedPlayerIndex","findIndex","selectedScoreIndex","playersWithEditedScores","forEach","index","scoreItem","playersSansActiveScores","playersWithNewScores","push","stateful","newRandomEmoji","emojisCurrentlyInUse","notUnique","usedEmoji","scoreLimit","randomScores","playersArray","data-active-players","reduce","editScores","newRoundActive","i18n","use","initReactI18next","LanguageDetector","init","resources","en","translation","ja","fallbackLng","debug","interpolation","escapeValue","refreshVh","vh","window","innerHeight","document","documentElement","setProperty","ReactDOM","render","getElementById","addEventListener"],"mappings":"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","file":"static/js/main.dacea27e.chunk.js","sourcesContent":["import emojiJson from \"gemoji/db/emoji.json\";\n// Emoji characters are contrained to version 8 and below to ensure maximum compatibility\n// (We don't want the dreaded 'not currently available' horizontal bars character on older devices...)\n// (...this is also why we use the 'gemoji' package to utilize this version info in the JSON)\n\n/**\n * Outputs a random emoji object of a given category\n * @param {String} category=\"Animals\" - Starting string of category name\n * @returns {\n    {\n      \"emoji\": \"🦙\",\n      \"description\": \"llama\",\n      \"category\": \"Animals & Nature\",\n      \"aliases\": [\n        \"llama\"\n      ],\n      \"tags\": [],\n      \"unicode_version\": \"11.0\",\n      \"ios_version\": \"12.1\"\n    }\n * }\n */\nconst randomEmoji = (category = \"Animals\") => {\n  const animalEmojis = emojiJson.filter(emoji => {\n    return emoji.category.startsWith(category) && emoji.unicode_version <= 8;\n  });\n\n  const randomEmojiIndex = Math.floor(Math.random() * animalEmojis.length);\n\n  const randomEmojiObject = animalEmojis[randomEmojiIndex];\n\n  return randomEmojiObject;\n};\n\nexport default randomEmoji;\n","import React, { Component } from \"react\";\nimport \"./Avatar.css\";\n\nclass Avatar extends Component {\n  render() {\n    return (\n      <div\n        className=\"avatar\"\n        tabIndex={0}\n        aria-label=\"Pick New Avatar\"\n        role=\"button\"\n        onClick={this.props.onAvatarClick}\n      >\n        <span role=\"img\" aria-label={this.props.avatar.description}>\n          {this.props.avatar.emoji}\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default Avatar;\n","import React, { Component } from \"react\";\nimport \"./ScoreTotal.css\";\n\nclass ScoreTotal extends Component {\n  render() {\n    return <div className=\"score-total\">{this.props.total}</div>;\n  }\n}\n\nexport default ScoreTotal;\n","import React, { Component } from \"react\";\nimport \"./ScoreList.css\";\n\nclass ScoreList extends Component {\n  render() {\n    return (\n      <ul className=\"score-list\">\n        {this.props.scores.map(round => (\n          <li\n            key={round.id}\n            className={\n              round.active\n                ? \"score-list__score score-list__score--active\"\n                : \"score-list__score\"\n            }\n            onClick={() => {\n              return this.props.onScoreEdit(this.props.playerId, round.id);\n            }}\n          >\n            {round.score === \"\" ? (\n              // needs text to maintain element height (space char collapses)\n              <span style={{ color: \"transparent\" }}>Empty</span>\n            ) : (\n              round.score\n            )}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default ScoreList;\n","/**\n * @returns {String} random string that is sufficiently long enough to be presumed unique\n */\nconst generateUniqueId = () => {\n  return Number(String(Math.random()).split(\".\")[1]).toString(16);\n};\n\nexport default generateUniqueId;\n","import React, { Component } from \"react\";\nimport { Translation } from \"react-i18next\";\nimport uniqueId from \"../../../helpers/uniqueId\";\nimport \"./ScoreInput.css\";\n\nimport { ReactComponent as CheckIcon } from \"feather-icons/dist/icons/check.svg\";\nimport { ReactComponent as ErrorIcon } from \"feather-icons/dist/icons/x.svg\";\n\nclass ScoreInput extends Component {\n  constructor() {\n    super();\n    this.state = {\n      valid: false,\n      value: \"\",\n    };\n    this.handleScoreChange = this.handleScoreChange.bind(this);\n    this.handleValueChange = this.handleValueChange.bind(this);\n  }\n\n  handleValueChange(event) {\n    const inputEl = event.target;\n    const inputValue = inputEl.value;\n    const validValue = inputEl.checkValidity() && inputEl.value !== \"\";\n\n    // this.handleScoreChange relies on `this.state.valid`\n    // so we need to ensure state is set before calling it\n    this.setState({ valid: validValue }, () => {\n      this.handleScoreChange(this.props.playerId, inputValue);\n    });\n  }\n\n  handleScoreChange(playerId, rawScoreValue) {\n    const newScoreValue = { score: rawScoreValue, valid: this.state.valid };\n    if (!this.props.newValue.hasOwnProperty(\"id\")) {\n      newScoreValue.id = uniqueId();\n    } else {\n      newScoreValue.id = this.props.newValue.id;\n    }\n    this.props.onNewScoreInput(playerId, newScoreValue);\n  }\n\n  render() {\n    return (\n      <div className=\"score-input\">\n        <Translation>\n          {(t) => (\n            <input\n              className=\"score-input__field\"\n              id={`score-input__field${this.props.playerId}`}\n              type=\"text\"\n              pattern=\"^-?\\d+\"\n              placeholder={t(\"score\")}\n              value={\n                this.props.newValue.hasOwnProperty(\"score\") &&\n                this.props.newValue.score !== \"\"\n                  ? this.props.newValue.score\n                  : \"\"\n              }\n              onChange={this.handleValueChange}\n            />\n          )}\n        </Translation>\n        <label\n          className=\"score-input__indicator\"\n          htmlFor={`score-input__field${this.props.playerId}`}\n        >\n          {this.props.newValue.hasOwnProperty(\"valid\") &&\n            this.props.newValue.valid && (\n              <CheckIcon className=\"score-input__indicator--success\" />\n            )}\n\n          {this.props.newValue.hasOwnProperty(\"valid\") &&\n            !this.props.newValue.valid &&\n            this.props.newValue.score !== \"\" && (\n              <ErrorIcon className=\"score-input__indicator--error\" />\n            )}\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default ScoreInput;\n","import React, { Component } from \"react\";\n\nimport \"./Player.css\";\nimport Avatar from \"./Avatar/Avatar\";\nimport ScoreTotal from \"./ScoreTotal/ScoreTotal\";\nimport ScoreList from \"./ScoreList/ScoreList\";\nimport ScoreInput from \"./ScoreInput/ScoreInput\";\n\nclass Player extends Component {\n  render() {\n    return (\n      <div className=\"player\">\n        <div className=\"player__title\">\n          <Avatar\n            avatar={this.props.avatar}\n            onAvatarClick={() => this.props.onAvatarClick(this.props.id)}\n          />\n          <ScoreTotal total={this.props.total} />\n        </div>\n        <div className=\"player__body\">\n          <ScoreInput\n            onNewScoreInput={this.props.onNewScoreInput}\n            playerId={this.props.id}\n            newValue={this.props.newScore}\n          />\n          <ScoreList\n            playerId={this.props.id}\n            scores={this.props.scores}\n            onScoreEdit={this.props.onScoreEdit}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Player;\n","import React from \"react\";\nimport { Trans } from \"react-i18next\";\nimport \"./ControlsTray.css\";\nimport { ReactComponent as PlayerAddIcon } from \"feather-icons/dist/icons/user-plus.svg\";\nimport { ReactComponent as PlayerRemoveIcon } from \"feather-icons/dist/icons/user-minus.svg\";\nimport { ReactComponent as CheckIcon } from \"feather-icons/dist/icons/check.svg\";\nimport { ReactComponent as PlusIcon } from \"feather-icons/dist/icons/plus.svg\";\nimport { ReactComponent as MinusIcon } from \"feather-icons/dist/icons/minus.svg\";\n\nclass ControlsTray extends React.Component {\n  playerInputComplete = () =>\n    this.props.players.every(\n      player => player.newScore.hasOwnProperty(\"valid\") && player.newScore.valid\n    );\n\n  scoreEditActive = () =>\n    this.props.players.every(({ scores }) =>\n      scores.some(({ active }) => active)\n    );\n\n  render() {\n    return (\n      <div className=\"controls-tray\">\n        <button\n          aria-label=\"Remove Player\"\n          title=\"Remove Player\"\n          className=\"controls-tray__button\"\n          onClick={this.props.onRemovePlayerClick}\n          disabled={this.props.players.length <= 1}\n        >\n          <PlayerRemoveIcon />\n          <span className=\"controls-tray__label\"><Trans>remove-player</Trans></span>\n        </button>\n\n        <button\n          aria-label=\"Remove Scores\"\n          title=\"Remove Scores\"\n          className=\"controls-tray__button\"\n          onClick={this.props.onRemoveScoresClick}\n          disabled={!this.scoreEditActive()}\n        >\n          <MinusIcon />\n          <span className=\"controls-tray__label\"><Trans>remove-scores</Trans></span>\n        </button>\n\n        <button\n          aria-label=\"Current Round\"\n          title={`Current Round: ${this.props.round}`}\n          className=\"controls-tray__button controls-tray__button--display\"\n          disabled={true}\n        >\n          <div className=\"controls-tray__round-icon\">{this.props.round}</div>\n          <span className=\"controls-tray__label\"><Trans>current-round</Trans></span>\n        </button>\n\n        <button\n          aria-label=\"Add Scores\"\n          title=\"Add Scores\"\n          className=\"controls-tray__button\"\n          onClick={this.props.onAddScoresClick}\n          disabled={!this.playerInputComplete()}\n        >\n          {this.playerInputComplete() ? <CheckIcon /> : <PlusIcon />}\n          <span className=\"controls-tray__label\">\n            <Trans>add-scores</Trans>\n          </span>\n        </button>\n\n        <button\n          aria-label=\"Add Player\"\n          title=\"Add Player\"\n          className=\"controls-tray__button\"\n          onClick={this.props.onAddPlayerClick}\n          disabled={this.props.players.length >= this.props.maxPlayers}\n        >\n          <PlayerAddIcon />\n          <span className=\"controls-tray__label\"><Trans>add-player</Trans></span>\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default ControlsTray;\n","import uniqueId from \"./uniqueId\";\n\n/**\n * Get an array of random scores (numbers) of your chosen length\n * @param {Number} scoreQuantity - how many scores you want returned\n * @param {Number} limit - (exclusive) what the upper limit of the random number should be\n */\nfunction getRandomScores(scoreQuantity = 5, limit = 100) {\n  return Array.from(\n    new Array(scoreQuantity) // new array of given length\n  ).map(() => ({\n    id: uniqueId(),\n    score: Math.floor(Math.random() * limit),\n    valid: true\n  })); // return new array with random numbers\n}\n\nexport default getRandomScores;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport randomEmoji from \"./helpers/randomEmoji\";\nimport Player from \"./components/Player/Player\";\nimport ControlsTray from \"./components/ControlsTray/ControlsTray\";\n\nimport uniqueId from \"./helpers/uniqueId\";\n// For testing / filling dummy data\nimport randomScores from \"./helpers/randomScores\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      maxPlayers: 4,\n      players: []\n    };\n\n    this.handleAvatarClick = this.handleAvatarClick.bind(this);\n    this.handleAddScoresClick = this.handleAddScoresClick.bind(this);\n    this.handleRemoveScoresClick = this.handleRemoveScoresClick.bind(this);\n    this.handlePlayerNewScoreInput = this.handlePlayerNewScoreInput.bind(this);\n    this.handleAddPlayerClick = this.handleAddPlayerClick.bind(this);\n    this.handleRemovePlayerClick = this.handleRemovePlayerClick.bind(this);\n    this.handleScoreEditClick = this.handleScoreEditClick.bind(this);\n  }\n\n  /**\n   * Set previous round of score editable in input fields\n   * @param {String} playerId - unique identifying string for player\n   * @param {String} scoreId - unique identifying string for score item\n   */\n  handleScoreEditClick(playerId, scoreId) {\n    const selectedPlayerIndex = this.state.players.findIndex(\n      player => player.id === playerId\n    );\n\n    const selectedScoreIndex = this.state.players[\n      selectedPlayerIndex\n    ].scores.findIndex(score => score.id === scoreId);\n\n    const playersWithEditedScores = this.state.players.map(player => {\n      player.newScore = player.scores[selectedScoreIndex];\n\n      player.scores.forEach(\n        (score, index) => (score.active = index === selectedScoreIndex)\n      );\n\n      return player;\n    });\n\n    this.setState({ players: playersWithEditedScores });\n  }\n\n  /**\n   * Set input values from input field to respective player's newScore state object\n   * @param {String} playerId - unique identifying string for player\n   * @param {Object} scoreItem - score with unique id\n   * @param {String} scoreItem.score - score\n   * @param {String} scoreItem.id - unique identifying string for score\n   */\n  handlePlayerNewScoreInput(playerId, scoreItem) {\n    const players = this.state.players.map(player => {\n      if (player.id === playerId) {\n        player.newScore.score = scoreItem.score;\n        player.newScore.id = scoreItem.id;\n        player.newScore.valid = scoreItem.valid;\n      }\n\n      return player;\n    });\n\n    this.setState({\n      players\n    });\n  }\n\n  /**\n   * Removes currently activated scores from players' `scores` array\n   */\n  handleRemoveScoresClick() {\n    const playersSansActiveScores = this.state.players.map(player => ({\n      ...player,\n      scores: player.scores.filter(({ active }) => !active),\n      newScore: {}\n    }));\n\n    this.setState({ players: playersSansActiveScores });\n  }\n\n  /**\n   * Adds players' current input to respective player's `scores` array\n   */\n  handleAddScoresClick() {\n    // ensure all players have inputted a score before allowing submit\n    if (\n      this.state.players.every(\n        player =>\n          player.newScore.hasOwnProperty(\"score\") &&\n          player.newScore.score !== \"\"\n      )\n    ) {\n      const playersWithNewScores = this.state.players.map(player => {\n        if (\n          player.scores.some(\n            score =>\n              score.hasOwnProperty(\"id\") && score.id === player.newScore.id\n          )\n        ) {\n          // blank inputs and de-activate scores\n          player.newScore = {};\n          player.scores.forEach(score => (score.active = false));\n        } else {\n          player.newScore.id = uniqueId();\n          player.scores.push(player.newScore);\n          player.newScore = {};\n        }\n\n        return player;\n      });\n\n      this.setState({ players: playersWithNewScores });\n    }\n  }\n\n  /**\n   * Sets specified player's avatar to a new random & unique emoji\n   * @param {String} id - unique identifying string for player\n   * @param {Boolean} stateful=true - if handler should set state or output emoji object directly\n   */\n  handleAvatarClick(playerId, stateful = true) {\n    let newRandomEmoji = randomEmoji();\n\n    const emojisCurrentlyInUse = this.state.players.map(\n      player => player.avatar.emoji\n    );\n\n    const notUnique = () =>\n      emojisCurrentlyInUse.some(\n        usedEmoji => usedEmoji === newRandomEmoji.emoji\n      );\n\n    // keep generating new values until unique\n    while (notUnique()) {\n      newRandomEmoji = randomEmoji();\n    }\n\n    // TODO: the output of this function shouldn't be \"switchable\" from stateful to output\n    if (stateful) {\n      const players = this.state.players.map(player => {\n        if (player.id === playerId) {\n          player.avatar = newRandomEmoji;\n        }\n\n        return player;\n      });\n\n      this.setState({ players });\n    } else {\n      return newRandomEmoji;\n    }\n  }\n\n  /**\n   * Adds a new initialized player to board\n   */\n  addPlayer = () =>\n    this.setState({\n      players: [...this.state.players, this.createNewPlayerObject()]\n    });\n\n  /**\n   * Removes last player on board\n   */\n  removePlayer = () => {\n    const playersSansOne = this.state.players.splice(\n      0,\n      this.state.players.length - 1\n    );\n\n    this.setState({\n      players: playersSansOne\n    });\n  };\n\n  /**\n   * Intantiates player object\n   */\n  createNewPlayerObject() {\n    const playerId = uniqueId();\n    const scoreQuantity = this.state.players[0]\n      ? this.state.players[0].scores.length\n      : 5;\n    const scoreLimit = this.state.players[0] ? 1 : 10;\n    this.handleAvatarClick(playerId);\n    return {\n      id: playerId,\n      scores: randomScores(scoreQuantity, scoreLimit),\n      newScore: {},\n      avatar: this.handleAvatarClick(playerId, false)\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    const playersArray = [{}, {}, {}, {}].map(player =>\n      this.createNewPlayerObject()\n    );\n\n    this.setState({ players: playersArray });\n  }\n\n  handleAddPlayerClick() {\n    const currentNumberOfPlayers = this.state.players.length;\n    const maxReached = currentNumberOfPlayers >= this.state.maxPlayers;\n\n    if (!maxReached) {\n      this.addPlayer();\n    }\n  }\n\n  handleRemovePlayerClick() {\n    const currentNumberOfPlayers = this.state.players.length;\n    const minReached = currentNumberOfPlayers <= 1;\n\n    if (!minReached) {\n      this.removePlayer();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app\" data-active-players={this.state.players.length}>\n        <div className=\"players\">\n          {this.state.players.map(player => {\n            return (\n              <Player\n                key={player.id}\n                {...player}\n                onAvatarClick={this.handleAvatarClick}\n                onNewScoreInput={this.handlePlayerNewScoreInput}\n                onScoreEdit={this.handleScoreEditClick}\n                total={player.scores\n                  .filter(({ score }) => Number(score)) // no NaN!\n                  .reduce((total, { score }) => total + Number(score), 0)}\n                editScores={this.state.editScores}\n              />\n            );\n          })}\n        </div>\n\n        <ControlsTray\n          onAddPlayerClick={this.handleAddPlayerClick}\n          onRemovePlayerClick={this.handleRemovePlayerClick}\n          players={this.state.players}\n          round={this.state.players[0].scores.length}\n          onAddScoresClick={this.handleAddScoresClick}\n          onRemoveScoresClick={this.handleRemoveScoresClick}\n          newRoundActive={this.state.newRoundActive}\n          maxPlayers={this.state.maxPlayers}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport LanguageDetector from \"i18next-browser-languagedetector\";\n\n// for all options read: https://www.i18next.com/overview/configuration-options\ni18n\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  .init({\n    resources: {\n      en: {\n        translation: {\n          \"add-scores\": \"Add Scores\",\n          \"remove-scores\": \"Remove Scores\",\n          \"current-round\": \"Current Round\",\n          \"add-player\": \"Add Player\",\n          \"remove-player\": \"Remove Player\",\n          \"score\": \"Score?\",\n          \"reset\": \"Reset\"\n        }\n      },\n      ja: {\n        translation: {\n          \"add-scores\": \"スコアを確定\",\n          \"remove-scores\": \"スコアを消す\",\n          \"current-round\": \"ゲーム目\",\n          \"add-player\": \"プレーヤーを増やす\",\n          \"remove-player\": \"プレーヤーを減らす\",\n          \"score\": \"スコア入力\",\n          \"reset\": \"リセット\"\n        }\n      }\n    },\n    fallbackLng: \"en\",\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n  });\n\nexport default i18n;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport './i18n';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nfunction refreshVh() {\n  let vh = window.innerHeight * 0.01;\n  document.documentElement.style.setProperty(\"--vh\", vh + \"px\");\n}\n\nwindow.addEventListener(\"resize\", refreshVh);\nrefreshVh();\n"],"sourceRoot":""}