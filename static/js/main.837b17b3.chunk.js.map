{"version":3,"sources":["helpers/randomEmoji.js","components/Player/Avatar/Avatar.js","components/Player/ScoreTotal/ScoreTotal.js","components/Player/ScoreList/ScoreList.js","helpers/uniqueId.js","components/Player/ScoreInput/ScoreInput.js","components/Player/Player.js","components/ControlsTray/ControlsTray.js","helpers/randomScores.js","App.js","index.js"],"names":["randomEmoji","category","animalEmojis","emojiJson","filter","emoji","startsWith","unicode_version","randomEmojiIndex","Math","floor","random","length","randomEmojiObject","Avatar","className","tabIndex","aria-label","role","onClick","this","props","onAvatarClick","avatar","description","Component","ScoreTotal","total","ScoreList","scores","map","round","key","id","active","onScoreEdit","playerId","score","style","color","generateUniqueId","Number","String","split","toString","ScoreInput","handleScoreChange","bind","handleValueChange","event","inputValue","target","value","isNaN","rawScoreValue","newScoreValue","newValue","hasOwnProperty","uniqueId","onNewScoreInput","type","placeholder","onChange","Player","newScore","ControlsTray","playerInputComplete","players","every","player","scoreEditActive","some","title","onRemovePlayerClick","disabled","onRemoveScoresClick","onAddScoresClick","onAddPlayerClick","maxPlayers","React","getRandomScores","scoreQuantity","limit","Array","from","App","addPlayer","setState","state","createNewPlayerObject","removePlayer","playersSansOne","splice","handleAvatarClick","handleAddScoresClick","handleRemoveScoresClick","handlePlayerNewScoreInput","handleAddPlayerClick","handleRemovePlayerClick","handleScoreEditClick","scoreId","selectedPlayerIndex","findIndex","selectedScoreIndex","playersWithEditedScores","forEach","index","scoreItem","playersSansActiveScores","playersWithNewScores","push","stateful","newRandomEmoji","emojisCurrentlyInUse","notUnique","usedEmoji","scoreLimit","randomScores","playersArray","data-active-players","reduce","editScores","newRoundActive","refreshVh","vh","window","innerHeight","document","documentElement","setProperty","ReactDOM","render","getElementById","addEventListener"],"mappings":"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","file":"static/js/main.837b17b3.chunk.js","sourcesContent":["import emojiJson from \"gemoji/db/emoji.json\";\n// Emoji characters are contrained to version 8 and below to ensure maximum compatibility\n// (We don't want the dreaded 'not currently available' horizontal bars character on older devices...)\n// (...this is also why we use the 'gemoji' package to utilize this version info in the JSON)\n\n/**\n * Outputs a random emoji object of a given category\n * @param {String} category=\"Animals\" - Starting string of category name\n * @returns {\n    {\n      \"emoji\": \"ðŸ¦™\",\n      \"description\": \"llama\",\n      \"category\": \"Animals & Nature\",\n      \"aliases\": [\n        \"llama\"\n      ],\n      \"tags\": [],\n      \"unicode_version\": \"11.0\",\n      \"ios_version\": \"12.1\"\n    }\n * }\n */\nconst randomEmoji = (category = \"Animals\") => {\n  const animalEmojis = emojiJson.filter(emoji => {\n    return emoji.category.startsWith(category) && emoji.unicode_version <= 8;\n  });\n\n  const randomEmojiIndex = Math.floor(Math.random() * animalEmojis.length);\n\n  const randomEmojiObject = animalEmojis[randomEmojiIndex];\n\n  return randomEmojiObject;\n};\n\nexport default randomEmoji;\n","import React, { Component } from \"react\";\nimport \"./Avatar.css\";\n\nclass Avatar extends Component {\n  render() {\n    return (\n      <div\n        className=\"avatar\"\n        tabIndex={0}\n        aria-label=\"Pick New Avatar\"\n        role=\"button\"\n        onClick={this.props.onAvatarClick}\n      >\n        <span role=\"img\" aria-label={this.props.avatar.description}>\n          {this.props.avatar.emoji}\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default Avatar;\n","import React, { Component } from \"react\";\nimport \"./ScoreTotal.css\";\n\nclass ScoreTotal extends Component {\n  render() {\n    return <div className=\"score-total\">{this.props.total}</div>;\n  }\n}\n\nexport default ScoreTotal;\n","import React, { Component } from \"react\";\nimport \"./ScoreList.css\";\n\nclass ScoreList extends Component {\n  render() {\n    return (\n      <ul className=\"score-list\">\n        {this.props.scores.map(round => (\n          <li\n            key={round.id}\n            className={\n              round.active\n                ? \"score-list__score score-list__score--active\"\n                : \"score-list__score\"\n            }\n            onClick={() => {\n              return this.props.onScoreEdit(this.props.playerId, round.id);\n            }}\n          >\n            {round.score === \"\" ? (\n              // needs text to maintain element height (space char collapses)\n              <span style={{ color: \"transparent\" }}>Empty</span>\n            ) : (\n              round.score\n            )}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default ScoreList;\n","/**\n * @returns {String} random string that is sufficiently long enough to be presumed unique\n */\nconst generateUniqueId = () => {\n  return Number(String(Math.random()).split(\".\")[1]).toString(16);\n};\n\nexport default generateUniqueId;\n","import React, { Component } from \"react\";\nimport uniqueId from \"../../../helpers/uniqueId\";\nimport \"./ScoreInput.css\";\n\nimport { ReactComponent as CheckIcon } from \"feather-icons/dist/icons/check.svg\";\n\nclass ScoreInput extends Component {\n  constructor() {\n    super();\n    this.handleScoreChange = this.handleScoreChange.bind(this);\n    this.handleValueChange = this.handleValueChange.bind(this);\n  }\n\n  handleValueChange(event) {\n    const inputValue = event.target.value;\n    if (!isNaN(Number(inputValue)) || inputValue === \"\") {\n      this.handleScoreChange(this.props.id, inputValue);\n    }\n  }\n\n  handleScoreChange(playerId, rawScoreValue) {\n    const newScoreValue = { score: rawScoreValue };\n    if (!this.props.newValue.hasOwnProperty(\"id\")) {\n      newScoreValue.id = uniqueId();\n    } else {\n      newScoreValue.id = this.props.newValue.id;\n    }\n    this.props.onNewScoreInput(playerId, newScoreValue);\n  }\n\n  render() {\n    return (\n      <div\n        className={\n          this.props.newValue !== \"\"\n            ? \"score-input score-input--completed\"\n            : \"score-input\"\n        }\n      >\n        <input\n          className=\"score-input__field\"\n          type=\"number\"\n          placeholder=\"Score?\"\n          value={\n            this.props.newValue.hasOwnProperty(\"score\") &&\n            this.props.newValue.score !== \"\"\n              ? this.props.newValue.score\n              : \"\"\n          }\n          onChange={this.handleValueChange}\n        />\n        <div className=\"score-input__indicator\">\n          {this.props.newValue.hasOwnProperty(\"score\") &&\n            this.props.newValue.score !== \"\" && <CheckIcon />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ScoreInput;\n","import React, { Component } from \"react\";\n\nimport \"./Player.css\";\nimport Avatar from \"./Avatar/Avatar\";\nimport ScoreTotal from \"./ScoreTotal/ScoreTotal\";\nimport ScoreList from \"./ScoreList/ScoreList\";\nimport ScoreInput from \"./ScoreInput/ScoreInput\";\n\nclass Player extends Component {\n  render() {\n    return (\n      <div className=\"player\">\n        <div className=\"player__title\">\n          <Avatar\n            avatar={this.props.avatar}\n            onAvatarClick={() => this.props.onAvatarClick(this.props.id)}\n          />\n          <ScoreTotal total={this.props.total} />\n        </div>\n        <div className=\"player__body\">\n          <ScoreInput\n            onNewScoreInput={this.props.onNewScoreInput}\n            id={this.props.id}\n            newValue={this.props.newScore}\n          />\n          <ScoreList\n            playerId={this.props.id}\n            scores={this.props.scores}\n            onScoreEdit={this.props.onScoreEdit}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Player;\n","import React from \"react\";\nimport \"./ControlsTray.css\";\nimport { ReactComponent as PlayerAddIcon } from \"feather-icons/dist/icons/user-plus.svg\";\nimport { ReactComponent as PlayerRemoveIcon } from \"feather-icons/dist/icons/user-minus.svg\";\nimport { ReactComponent as CheckIcon } from \"feather-icons/dist/icons/check.svg\";\nimport { ReactComponent as PlusIcon } from \"feather-icons/dist/icons/plus.svg\";\nimport { ReactComponent as MinusIcon } from \"feather-icons/dist/icons/minus.svg\";\n\nclass ControlsTray extends React.Component {\n  playerInputComplete = () =>\n    this.props.players.every(\n      player =>\n        player.newScore.hasOwnProperty(\"score\") && player.newScore.score !== \"\"\n    );\n\n  scoreEditActive = () =>\n    this.props.players.every(({ scores }) =>\n      scores.some(({ active }) => active)\n    );\n\n  render() {\n    return (\n      <div className=\"controls-tray\">\n        <button\n          aria-label=\"Remove Player\"\n          title=\"Remove Player\"\n          className=\"controls-tray__button\"\n          onClick={this.props.onRemovePlayerClick}\n          disabled={this.props.players.length <= 1}\n        >\n          <PlayerRemoveIcon />\n          <span className=\"controls-tray__label\">Remove Player</span>\n        </button>\n\n        <button\n          aria-label=\"Remove Scores\"\n          title=\"Remove Scores\"\n          className=\"controls-tray__button\"\n          onClick={this.props.onRemoveScoresClick}\n          disabled={!this.scoreEditActive()}\n        >\n          <MinusIcon />\n          <span className=\"controls-tray__label\">Remove Scores</span>\n        </button>\n\n        <button\n          aria-label=\"Current Round\"\n          title={`Current Round: ${this.props.round}`}\n          className=\"controls-tray__button\"\n        >\n          <div className=\"controls-tray__round-icon\">{this.props.round}</div>\n          <span className=\"controls-tray__label\">Current Round</span>\n        </button>\n\n        <button\n          aria-label=\"Add Scores\"\n          title=\"Add Scores\"\n          className=\"controls-tray__button\"\n          onClick={this.props.onAddScoresClick}\n          disabled={!this.playerInputComplete()}\n        >\n          {this.playerInputComplete() ? <CheckIcon /> : <PlusIcon />}\n          <span className=\"controls-tray__label\">Add Scores</span>\n        </button>\n\n        <button\n          aria-label=\"Add Player\"\n          title=\"Add Player\"\n          className=\"controls-tray__button\"\n          onClick={this.props.onAddPlayerClick}\n          disabled={this.props.players.length >= this.props.maxPlayers}\n        >\n          <PlayerAddIcon />\n          <span className=\"controls-tray__label\">Add Player</span>\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default ControlsTray;\n","import uniqueId from \"./uniqueId\";\n\n/**\n * Get an array of random scores (numbers) of your chosen length\n * @param {Number} scoreQuantity - how many scores you want returned\n * @param {Number} limit - (exclusive) what the upper limit of the random number should be\n */\nfunction getRandomScores(scoreQuantity = 5, limit = 100) {\n  return Array.from(\n    new Array(scoreQuantity) // new array of given length\n  ).map(() => ({\n    id: uniqueId(),\n    score: Math.floor(Math.random() * limit)\n  })); // return new array with random numbers\n}\n\nexport default getRandomScores;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport randomEmoji from \"./helpers/randomEmoji\";\nimport Player from \"./components/Player/Player\";\nimport ControlsTray from \"./components/ControlsTray/ControlsTray\";\n\nimport uniqueId from \"./helpers/uniqueId\";\n// For testing / filling dummy data\nimport randomScores from \"./helpers/randomScores\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      maxPlayers: 4,\n      players: []\n    };\n\n    this.handleAvatarClick = this.handleAvatarClick.bind(this);\n    this.handleAddScoresClick = this.handleAddScoresClick.bind(this);\n    this.handleRemoveScoresClick = this.handleRemoveScoresClick.bind(this);\n    this.handlePlayerNewScoreInput = this.handlePlayerNewScoreInput.bind(this);\n    this.handleAddPlayerClick = this.handleAddPlayerClick.bind(this);\n    this.handleRemovePlayerClick = this.handleRemovePlayerClick.bind(this);\n    this.handleScoreEditClick = this.handleScoreEditClick.bind(this);\n  }\n\n  /**\n   * Set previous round of score editable in input fields\n   * @param {String} playerId - unique identifying string for player\n   * @param {String} scoreId - unique identifying string for score item\n   */\n  handleScoreEditClick(playerId, scoreId) {\n    const selectedPlayerIndex = this.state.players.findIndex(\n      player => player.id === playerId\n    );\n\n    const selectedScoreIndex = this.state.players[\n      selectedPlayerIndex\n    ].scores.findIndex(score => score.id === scoreId);\n\n    const playersWithEditedScores = this.state.players.map(player => {\n      player.newScore = player.scores[selectedScoreIndex];\n\n      player.scores.forEach(\n        (score, index) => (score.active = index === selectedScoreIndex)\n      );\n\n      return player;\n    });\n\n    this.setState({ players: playersWithEditedScores });\n  }\n\n  /**\n   * Set input values from input field to respective player's newScore state object\n   * @param {String} playerId - unique identifying string for player\n   * @param {Object} scoreItem - score with unique id\n   * @param {Number} scoreItem.score - score\n   * @param {String} scoreItem.id - unique identifying string for score\n   */\n  handlePlayerNewScoreInput(playerId, scoreItem) {\n    const players = this.state.players.map(player => {\n      if (player.id === playerId) {\n        if (scoreItem.score === \"\") {\n          player.newScore.score = \"\";\n        } else if (typeof Number(scoreItem.score) === \"number\") {\n          player.newScore.score = Number(scoreItem.score);\n          player.newScore.id = scoreItem.id;\n        }\n      }\n\n      return player;\n    });\n\n    this.setState({\n      players\n    });\n  }\n\n  /**\n   * Removes currently activated scores from players' `scores` array\n   */\n  handleRemoveScoresClick() {\n    const playersSansActiveScores = this.state.players.map(player => ({\n      ...player,\n      scores: player.scores.filter(({ active }) => !active),\n      newScore: {}\n    }));\n\n    this.setState({ players: playersSansActiveScores });\n  }\n\n  /**\n   * Adds players' current input to respective player's `scores` array\n   */\n  handleAddScoresClick() {\n    // ensure all players have inputted a score before allowing submit\n    if (\n      this.state.players.every(\n        player =>\n          player.newScore.hasOwnProperty(\"score\") &&\n          player.newScore.score !== \"\"\n      )\n    ) {\n      const playersWithNewScores = this.state.players.map(player => {\n        if (\n          player.scores.some(\n            score =>\n              score.hasOwnProperty(\"id\") && score.id === player.newScore.id\n          )\n        ) {\n          // blank inputs and de-activate scores\n          player.newScore = {};\n          player.scores.forEach(score => (score.active = false));\n        } else {\n          player.newScore.id = uniqueId();\n          player.scores.push(player.newScore);\n          player.newScore = {};\n        }\n\n        return player;\n      });\n\n      this.setState({ players: playersWithNewScores });\n    }\n  }\n\n  /**\n   * Sets specified player's avatar to a new random & unique emoji\n   * @param {String} id - unique identifying string for player\n   * @param {Boolean} stateful=true - if handler should set state or output emoji object directly\n   */\n  handleAvatarClick(playerId, stateful = true) {\n    let newRandomEmoji = randomEmoji();\n\n    const emojisCurrentlyInUse = this.state.players.map(\n      player => player.avatar.emoji\n    );\n\n    const notUnique = () =>\n      emojisCurrentlyInUse.some(\n        usedEmoji => usedEmoji === newRandomEmoji.emoji\n      );\n\n    // keep generating new values until unique\n    while (notUnique()) {\n      newRandomEmoji = randomEmoji();\n    }\n\n    // TODO: the output of this function shouldn't be \"switchable\" from stateful to output\n    if (stateful) {\n      const players = this.state.players.map(player => {\n        if (player.id === playerId) {\n          player.avatar = newRandomEmoji;\n        }\n\n        return player;\n      });\n\n      this.setState({ players });\n    } else {\n      return newRandomEmoji;\n    }\n  }\n\n  /**\n   * Adds a new initialized player to board\n   */\n  addPlayer = () =>\n    this.setState({\n      players: [...this.state.players, this.createNewPlayerObject()]\n    });\n\n  /**\n   * Removes last player on board\n   */\n  removePlayer = () => {\n    const playersSansOne = this.state.players.splice(\n      0,\n      this.state.players.length - 1\n    );\n\n    this.setState({\n      players: playersSansOne\n    });\n  };\n\n  /**\n   * Intantiates player object\n   */\n  createNewPlayerObject() {\n    const playerId = uniqueId();\n    const scoreQuantity = this.state.players[0]\n      ? this.state.players[0].scores.length\n      : 5;\n    const scoreLimit = this.state.players[0] ? 1 : 10;\n    this.handleAvatarClick(playerId);\n    return {\n      id: playerId,\n      scores: randomScores(scoreQuantity, scoreLimit),\n      newScore: {},\n      avatar: this.handleAvatarClick(playerId, false)\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    const playersArray = [{}, {}, {}, {}].map(player =>\n      this.createNewPlayerObject()\n    );\n\n    this.setState({ players: playersArray });\n  }\n\n  handleAddPlayerClick() {\n    const currentNumberOfPlayers = this.state.players.length;\n    const maxReached = currentNumberOfPlayers >= this.state.maxPlayers;\n\n    if (!maxReached) {\n      this.addPlayer();\n    }\n  }\n\n  handleRemovePlayerClick() {\n    const currentNumberOfPlayers = this.state.players.length;\n    const minReached = currentNumberOfPlayers <= 1;\n\n    if (!minReached) {\n      this.removePlayer();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app\" data-active-players={this.state.players.length}>\n        <div className=\"players\">\n          {this.state.players.map(player => {\n            return (\n              <Player\n                key={player.id}\n                {...player}\n                onAvatarClick={this.handleAvatarClick}\n                onNewScoreInput={this.handlePlayerNewScoreInput}\n                onScoreEdit={this.handleScoreEditClick}\n                total={player.scores.reduce(\n                  (total, { score }) => total + Number(score),\n                  0\n                )}\n                editScores={this.state.editScores}\n              />\n            );\n          })}\n        </div>\n\n        <ControlsTray\n          onAddPlayerClick={this.handleAddPlayerClick}\n          onRemovePlayerClick={this.handleRemovePlayerClick}\n          players={this.state.players}\n          round={this.state.players[0].scores.length}\n          onAddScoresClick={this.handleAddScoresClick}\n          onRemoveScoresClick={this.handleRemoveScoresClick}\n          newRoundActive={this.state.newRoundActive}\n          maxPlayers={this.props.maxPlayers}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nfunction refreshVh() {\n  let vh = window.innerHeight * 0.01;\n  document.documentElement.style.setProperty(\"--vh\", vh + \"px\");\n}\n\nwindow.addEventListener(\"resize\", refreshVh);\nrefreshVh();\n"],"sourceRoot":""}