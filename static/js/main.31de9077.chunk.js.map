{"version":3,"sources":["helpers/randomEmoji.js","components/Player/Avatar/Avatar.js","components/Player/ScoreTotal/ScoreTotal.js","components/Player/ScoreList/ScoreList.js","components/Player/ScoreInput/ScoreInput.js","components/Player/Player.js","components/ControlsTray/ControlsTray.js","helpers/randomScores.js","App.js","index.js"],"names":["randomEmoji","category","animalEmojis","emojiJson","filter","emoji","startsWith","unicode_version","randomEmojiIndex","Math","floor","random","length","randomEmojiObject","Avatar","className","tabIndex","aria-label","role","onClick","this","props","onAvatarClick","avatar","description","Component","ScoreTotal","total","ScoreList","scores","map","score","index","key","ScoreInput","handleScoreChange","bind","handleValueChange","event","inputValue","target","value","isNaN","Number","id","onNewScoreInput","newValue","type","placeholder","onChange","Player","newScore","ControlsTray","players","some","player","title","onRemovePlayer","disabled","round","onSubmitScoresClick","playerInputNotComplete","onAddPlayer","React","getRandomScores","scoreQuantity","limit","Array","from","App","addPlayer","setState","state","createNewPlayerObject","removePlayer","playersSansOne","splice","maxPlayers","handleAvatarClick","handleSubmitScoresClick","handlePlayerNewScore","playerAddHandler","playerRemoveHandler","playersWithNewScores","push","stateful","newRandomEmoji","emojisCurrentlyInUse","notUnique","usedEmoji","String","split","toString","randomScores","playersArray","data-active-players","reduce","newRoundActive","refreshVh","vh","window","innerHeight","document","documentElement","style","setProperty","ReactDOM","render","getElementById","addEventListener"],"mappings":"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","file":"static/js/main.31de9077.chunk.js","sourcesContent":["import emojiJson from \"gemoji/db/emoji.json\";\n// Emoji characters are contrained to version 8 and below to ensure maximum compatibility\n// (We don't want the dreaded 'not currently available' horizontal bars character on older devices...)\n// (...this is also why we use the 'gemoji' package to utilize this version info in the JSON)\n\n/**\n * Outputs a random emoji object of a given category\n * @param {String} category=\"Animals\" - Starting string of category name\n * @returns {\n    {\n      \"emoji\": \"ðŸ¦™\",\n      \"description\": \"llama\",\n      \"category\": \"Animals & Nature\",\n      \"aliases\": [\n        \"llama\"\n      ],\n      \"tags\": [],\n      \"unicode_version\": \"11.0\",\n      \"ios_version\": \"12.1\"\n    }\n * }\n */\nconst randomEmoji = (category = \"Animals\") => {\n  const animalEmojis = emojiJson.filter(emoji => {\n    return emoji.category.startsWith(category) && emoji.unicode_version <= 8;\n  });\n\n  const randomEmojiIndex = Math.floor(Math.random() * animalEmojis.length);\n\n  const randomEmojiObject = animalEmojis[randomEmojiIndex];\n\n  return randomEmojiObject;\n};\n\nexport default randomEmoji;\n","import React, { Component } from \"react\";\nimport \"./Avatar.css\";\n\nclass Avatar extends Component {\n  render() {\n    return (\n      <div\n        className=\"avatar\"\n        tabIndex={0}\n        aria-label=\"Pick New Avatar\"\n        role=\"button\"\n        onClick={this.props.onAvatarClick}\n      >\n        <span role=\"img\" aria-label={this.props.avatar.description}>\n          {this.props.avatar.emoji}\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default Avatar;\n","import React, { Component } from \"react\";\nimport \"./ScoreTotal.css\";\n\nclass ScoreTotal extends Component {\n  render() {\n    return <div className=\"score-total\">{this.props.total}</div>;\n  }\n}\n\nexport default ScoreTotal;\n","import React, { Component } from \"react\";\nimport \"./ScoreList.css\";\n\nclass ScoreList extends Component {\n  render() {\n    return (\n      <ul className=\"score-list\">\n        {this.props.scores.map((score, index) => (\n          <li key={index} className={index === (this.props.scores.length - 1) ? \"score-list__score score-list__score--latest\" : \"score-list__score\"}>\n            { score }\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default ScoreList;\n","import React, { Component } from \"react\";\nimport \"./ScoreInput.css\";\n\nimport { ReactComponent as CheckIcon } from \"feather-icons/dist/icons/check.svg\";\n\nclass ScoreInput extends Component {\n  constructor() {\n    super();\n    this.handleScoreChange = this.handleScoreChange.bind(this);\n    this.handleValueChange = this.handleValueChange.bind(this);\n  }\n\n  handleValueChange(event) {\n    const inputValue = event.target.value;\n    if (!isNaN(Number(inputValue)) || inputValue === \"\") {\n      this.handleScoreChange(this.props.id, inputValue);\n    }\n  }\n\n  handleScoreChange(id, score) {\n    this.props.onNewScoreInput(id, score);\n  }\n\n  render() {\n    return (\n      <div\n        className={\n          this.props.newValue !== \"\"\n            ? \"score-input score-input--completed\"\n            : \"score-input\"\n        }\n      >\n        <input\n          className=\"score-input__field\"\n          type=\"number\"\n          placeholder=\"Score?\"\n          value={this.props.newValue}\n          onChange={this.handleValueChange}\n        />\n        <div className=\"score-input__indicator\">\n          {this.props.newValue !== \"\" && <CheckIcon />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ScoreInput;\n","import React, { Component } from \"react\";\n\nimport \"./Player.css\";\nimport Avatar from \"./Avatar/Avatar\";\nimport ScoreTotal from \"./ScoreTotal/ScoreTotal\";\nimport ScoreList from \"./ScoreList/ScoreList\";\nimport ScoreInput from \"./ScoreInput/ScoreInput\";\n\nclass Player extends Component {\n  render() {\n    return (\n      <div className=\"player\">\n        <div className=\"player__title\">\n          <Avatar\n            avatar={this.props.avatar}\n            onAvatarClick={() => this.props.onAvatarClick(this.props.id)}\n          />\n          <ScoreTotal total={this.props.total} />\n        </div>\n        <div className=\"player__body\">\n          <ScoreInput\n            onNewScoreInput={this.props.onNewScoreInput}\n            id={this.props.id}\n            newValue={this.props.newScore}\n          />\n          <ScoreList scores={this.props.scores} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Player;\n","import React from \"react\";\nimport \"./ControlsTray.css\";\nimport { ReactComponent as PlayerAddIcon } from \"feather-icons/dist/icons/user-plus.svg\";\nimport { ReactComponent as PlayerRemoveIcon } from \"feather-icons/dist/icons/user-minus.svg\";\nimport { ReactComponent as CheckIcon } from \"feather-icons/dist/icons/check.svg\";\nimport { ReactComponent as PlusIcon } from \"feather-icons/dist/icons/plus.svg\";\n\nclass ControlsTray extends React.Component {\n  playerInputNotComplete() {\n    return this.props.players.some(player => player.newScore === \"\");\n  }\n\n  render() {\n    return (\n      <div className=\"controls-tray\">\n        <button\n          aria-label=\"Remove Player\"\n          title=\"Remove Player\"\n          className=\"controls-tray__button\"\n          onClick={this.props.onRemovePlayer}\n          disabled={this.props.players.length <= 1}\n        >\n          <PlayerRemoveIcon />\n          <span className=\"controls-tray__label\">Remove Player</span>\n        </button>\n\n        <button\n          aria-label=\"Round Number\"\n          title={`Round Number: ${this.props.round}`}\n          className=\"controls-tray__button\"\n        >\n          <div className=\"controls-tray__round-icon\">{this.props.round}</div>\n          <span className=\"controls-tray__label\">Round Number</span>\n        </button>\n\n        <button\n          aria-label=\"Submit Scores\"\n          title=\"Submit Scores\"\n          className=\"controls-tray__button\"\n          onClick={this.props.onSubmitScoresClick}\n          disabled={this.playerInputNotComplete()}\n        >\n          {this.playerInputNotComplete() ? <PlusIcon /> : <CheckIcon />}\n          <span className=\"controls-tray__label\">Submit Scores</span>\n        </button>\n\n        <button\n          aria-label=\"Add Player\"\n          title=\"Add Player\"\n          className=\"controls-tray__button\"\n          onClick={this.props.onAddPlayer}\n          disabled={this.props.players.length >= 4}\n        >\n          <PlayerAddIcon />\n          <span className=\"controls-tray__label\">Add Player</span>\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default ControlsTray;\n","/**\n * Get an array of random scores (numbers) of your chosen length\n * @param Number scoreQuantity - how many scores you want returned\n * @param Number limit - what the upper limit of the random number should be\n */\nfunction getRandomScores(scoreQuantity = 5, limit = 100) {\n  return Array.from(\n    new Array(scoreQuantity) // new array of given length\n  ).map(() => Math.floor(Math.random() * limit)); // return new array with random numbers\n}\n\nexport default getRandomScores;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport randomEmoji from \"./helpers/randomEmoji\";\nimport Player from \"./components/Player/Player\";\nimport ControlsTray from \"./components/ControlsTray/ControlsTray\";\n\n// For testing / filling dummy data\nimport randomScores from \"./helpers/randomScores\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      maxPlayers: 4,\n      players: []\n    };\n\n    this.handleAvatarClick = this.handleAvatarClick.bind(this);\n    this.handleSubmitScoresClick = this.handleSubmitScoresClick.bind(this);\n    this.handlePlayerNewScore = this.handlePlayerNewScore.bind(this);\n    this.playerAddHandler = this.playerAddHandler.bind(this);\n    this.playerRemoveHandler = this.playerRemoveHandler.bind(this);\n  }\n\n  handlePlayerNewScore(id, score) {\n    const players = this.state.players.map(player => {\n      if (player.id === id) {\n        if (typeof score === \"number\") {\n          player.newScore = Number(score);\n        } else {\n          player.newScore = score;\n        }\n      }\n\n      return player;\n    });\n\n    this.setState({\n      players\n    });\n  }\n\n  handleSubmitScoresClick() {\n    if (!this.state.players.some(player => player.newScore === \"\")) {\n      const playersWithNewScores = this.state.players.map(player => {\n        player.scores.push(player.newScore);\n        player.newScore = \"\";\n\n        return player;\n      });\n\n      this.setState({ players: [...playersWithNewScores] });\n    }\n  }\n\n  /**\n   * Sets specified player's avatar to a new random & unique emoji\n   * @param {String} id - unique identifying string for player\n   * @param {Boolean} stateful=true - if handler should set state or output emoji object directly\n   */\n  handleAvatarClick(id, stateful = true) {\n    let newRandomEmoji = randomEmoji();\n\n    const emojisCurrentlyInUse = this.state.players.map(\n      player => player.avatar.emoji\n    );\n\n    const notUnique = () =>\n      emojisCurrentlyInUse.some(\n        usedEmoji => usedEmoji === newRandomEmoji.emoji\n      );\n\n    while (notUnique()) {\n      newRandomEmoji = randomEmoji();\n    }\n\n    if (stateful) {\n      const players = this.state.players.map(player => {\n        if (player.id === id) {\n          player.avatar = newRandomEmoji;\n        }\n\n        return player;\n      });\n\n      this.setState({ players });\n    } else {\n      return newRandomEmoji;\n    }\n  }\n\n  addPlayer = () =>\n    this.setState({\n      players: [...this.state.players, this.createNewPlayerObject()]\n    });\n\n  removePlayer = () => {\n    const playersSansOne = this.state.players.splice(\n      0,\n      this.state.players.length - 1\n    );\n\n    this.setState({\n      players: [...playersSansOne]\n    });\n  };\n\n  createNewPlayerObject() {\n    const id = Number(String(Math.random()).split(\".\")[1]).toString(16);\n    this.handleAvatarClick(id);\n    return {\n      id,\n      scores: randomScores(10, 15),\n      newScore: \"\",\n      avatar: this.handleAvatarClick(id, false)\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    const playersArray = [{}, {}, {}, {}].map(player =>\n      this.createNewPlayerObject()\n    );\n\n    this.setState({ players: playersArray });\n  }\n\n  playerAddHandler() {\n    const currentNumberOfPlayers = this.state.players.length;\n    const maxReached = currentNumberOfPlayers >= this.state.maxPlayers;\n\n    if (!maxReached) {\n      this.addPlayer();\n    }\n  }\n\n  playerRemoveHandler() {\n    const currentNumberOfPlayers = this.state.players.length;\n    const minReached = currentNumberOfPlayers <= 1;\n\n    if (!minReached) {\n      this.removePlayer();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app\" data-active-players={this.state.players.length}>\n        <div className=\"players\">\n          {this.state.players.map(player => {\n            return (\n              <Player\n                key={player.id}\n                {...player}\n                onAvatarClick={this.handleAvatarClick}\n                onNewScoreInput={this.handlePlayerNewScore}\n                total={player.scores.reduce((total, score) => total + score, 0)}\n              />\n            );\n          })}\n        </div>\n        <ControlsTray\n          onAddPlayer={this.playerAddHandler}\n          onRemovePlayer={this.playerRemoveHandler}\n          players={this.state.players}\n          round={this.state.players[0].scores.length + 1}\n          onSubmitScoresClick={this.handleSubmitScoresClick}\n          newRoundActive={this.state.newRoundActive}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nfunction refreshVh() {\n  let vh = window.innerHeight * 0.01;\n  document.documentElement.style.setProperty(\"--vh\", vh + \"px\");\n}\n\nwindow.addEventListener(\"resize\", refreshVh);\nrefreshVh();\n"],"sourceRoot":""}